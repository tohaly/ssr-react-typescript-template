{"version":3,"file":"server.js","mappings":"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","sources":["webpack://ssr-template/./config/paths.ts","webpack://ssr-template/./src/client/components/App.tsx","webpack://ssr-template/./src/server/index.tsx","webpack://ssr-template/./src/server/middleware/sssRender.tsx","webpack://ssr-template/./src/server/template/Html.tsx","webpack://ssr-template/./src/server/template/index.ts","webpack://ssr-template/external commonjs \"body-parser\"","webpack://ssr-template/external commonjs \"chalk\"","webpack://ssr-template/external commonjs \"cors\"","webpack://ssr-template/external commonjs \"dotenv\"","webpack://ssr-template/external commonjs \"express\"","webpack://ssr-template/external commonjs \"react\"","webpack://ssr-template/external commonjs \"react-dom/server\"","webpack://ssr-template/external node-commonjs \"fs\"","webpack://ssr-template/external node-commonjs \"path\"","webpack://ssr-template/webpack/bootstrap","webpack://ssr-template/webpack/before-startup","webpack://ssr-template/webpack/startup","webpack://ssr-template/webpack/after-startup"],"sourcesContent":["import fs from 'fs'\n\nexport const rootPath = fs.realpathSync(process.cwd())\n\nexport const resolvePath = (path: string): string => `${rootPath}/${path}`\n\nexport const paths = {\n  publicPath: '/static/',\n  srcClient: resolvePath('src/client'),\n  clientBuild: resolvePath('build/client'),\n  appHtml: resolvePath('src/client/template.html'),\n  srcServer: resolvePath('src/server'),\n  serverBuild: resolvePath('build/server'),\n} as const\n","import React from 'react'\n\nexport const App: React.FC = () => <h1>Hello ddworlааdeeeqwe!!</h1>\n","import dotenv from 'dotenv'\nimport express from 'express'\nimport path from 'path'\nimport cors from 'cors'\nimport { paths } from '../../config/paths'\nimport bodyParser from 'body-parser'\nimport chalk from 'chalk'\nimport { sssRender } from './middleware/sssRender'\n\ndotenv.config()\n\nconst app = express()\n\n// Use Nginx or Apache to serve static assets in production or remove the if() around the\n// following\n// lines to use the express.static middleware to serve assets for production (not recommended!)\n// if (process.env.NODE_ENV === 'development') {\napp.use(paths.publicPath, express.static(path.join(paths.clientBuild, paths.publicPath)))\n// }\n\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\napp.use(sssRender())\n\napp.listen(process.env.PORT || 8500, () => {\n  console.log(\n    `[${new Date().toISOString()}]`,\n    chalk.blue(`App is running: http://localhost:${process.env.PORT || 8500}`),\n  )\n})\n","import React from 'react'\nimport { Request, Response } from 'express'\nimport { renderToString } from 'react-dom/server'\nimport { Html } from '../template'\nimport { App } from '../../client/components/App'\n\nexport const sssRender =\n  () =>\n  (req: Request, res: Response): Response => {\n    const cssScripts: string[] = []\n    const jsScripts = ['http://localhost:8501/static/bundle.js', 'http://localhost:8501/static/vendor.js']\n    const appMarkup = renderToString(<App />)\n    const html = renderToString(<Html cssScripts={cssScripts} jsScripts={jsScripts} innerHtml={appMarkup} />)\n    const htmlMarker = '<!doctype html>'\n\n    return res.send(htmlMarker + html)\n  }\n","import React from 'react'\n\ntype Props = {\n  cssScripts: string[]\n  jsScripts: string[]\n  innerHtml: string\n}\n\nexport const Html: React.FC<React.PropsWithChildren<Props>> = ({ cssScripts, jsScripts, innerHtml }) => {\n  return (\n    <html lang='ru'>\n      <head>\n        <meta charSet='utf-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1' />\n        {cssScripts.filter(Boolean).map((href) => (\n          <link key={href} rel='stylesheet' href={href} />\n        ))}\n      </head>\n      <body>\n        {/* eslint-disable-next-line react/no-danger */}\n        <div id='app' dangerouslySetInnerHTML={{ __html: innerHtml }} />\n        {jsScripts.filter(Boolean).map((src) => (\n          <script key={src} src={src} />\n        ))}\n      </body>\n    </html>\n  )\n}\n","export * from './Html'\n","module.exports = require(\"body-parser\");","module.exports = require(\"chalk\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"react\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/server/index.tsx\");\n",""],"names":[],"sourceRoot":""}